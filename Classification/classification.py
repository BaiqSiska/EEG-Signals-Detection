# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tziCNh6Gqvloxq6f9fhK5ZxeON8o8iTd

# SVM
"""

from sklearn.metrics import roc_auc_score
from sklearn.model_selection import train_test_split, GridSearchCV,StratifiedKFold

from sklearn import svm
import time
start = time.time()
svm=svm.SVC(class_weight=None,C=10,gamma=0.001,kernel='rbf',random_state=100) 
#Setup arrays to store training and test accuracies
n=10 #jumlah fold
from sklearn.model_selection import StratifiedKFold
kf=StratifiedKFold(n_splits=n, random_state=None)
cm=[]
total=[]
ac=[]
se=[]
sp=[]
auc=[]

for train_index, test_index in kf.split(X,y):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y[train_index], y[test_index]
    svm.fit(X_train, y_train)
    y_pred = svm.predict(X_test)
    cm.append((confusion_matrix(y_test, y_pred)).astype(float))
for j in range (n):
    total.append(sum(sum(cm[j])))
    ac.append((cm[j][0,0]+cm[j][1,1])/total[j])
    se.append(cm[j][0,0]/(cm[j][0,0]+cm[j][0,1]))
    sp.append(cm[j][1,1]/(cm[j][1,0]+cm[j][1,1]))
    auc.append(((cm[j][0,0]/(cm[j][0,0]+cm[j][0,1]))+(cm[j][1,1]/(cm[j][1,0]+cm[j][1,1])))/2)
akurasi=np.mean(ac)
spesifisiti=np.mean(se)
sensitiviti=np.mean(sp)
AUC=np.mean(auc)
df=pd.DataFrame()
test=dict()
for j in range (4):
    test[j]=[]
for i in range (n):
    test[0].append(ac[i])
    test[1].append(se[i])
    test[2].append(sp[i])
    test[3].append(auc[i])
for i in range (4):
    df_k2=pd.concat([df_k2,pd.DataFrame(test[i])],axis=1)
df.columns=['Akurasi','Spesifisitas','Sensitivitas','Area Under the Curve']
end = time.time()
print ("Waktu Proses Klasifikasi SVM dengan Kernel RBF", end - start,"Second")
df

import time
from sklearn import svm
start = time.time()
svm=svm.SVC(class_weight=None,C=0.025,gamma=0.001,kernel='poly',random_state=100) 
#Setup arrays to store training and test accuracies
n=10 #jumlah fold
from sklearn.model_selection import StratifiedKFold
kf=StratifiedKFold(n_splits=n, random_state=None)
cm=[]
total=[]
ac=[]
se=[]
sp=[]
auc=[]

for train_index, test_index in kf.split(X,y):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y[train_index], y[test_index]
    svm.fit(X_train, y_train)
    y_pred = svm.predict(X_test)
    cm.append((confusion_matrix(y_test, y_pred)).astype(float))
for j in range (n):
    total.append(sum(sum(cm[j])))
    ac.append((cm[j][0,0]+cm[j][1,1])/total[j])
    se.append(cm[j][0,0]/(cm[j][0,0]+cm[j][0,1]))
    sp.append(cm[j][1,1]/(cm[j][1,0]+cm[j][1,1]))
    auc.append(((cm[j][0,0]/(cm[j][0,0]+cm[j][0,1]))+(cm[j][1,1]/(cm[j][1,0]+cm[j][1,1])))/2)
akurasi=np.mean(ac)
spesifisiti=np.mean(se)
sensitiviti=np.mean(sp)
AUC=np.mean(auc)
df=pd.DataFrame()
test=dict()
for j in range (4):
    test[j]=[]
for i in range (n):
    test[0].append(ac[i])
    test[1].append(se[i])
    test[2].append(sp[i])
    test[3].append(auc[i])
for i in range (4):
    df_k2=pd.concat([df_k2,pd.DataFrame(test[i])],axis=1)
df.columns=['Akurasi','Spesifisitas','Sensitivitas','Area Under the Curve']
end = time.time()
print ("Waktu Proses Klasifikasi SVM dengan Kernel Polynomial", end - start,"Second")
df

import time
from sklearn import svm
start= time.time()
svm=svm.SVC(class_weight=None,C=0.001,kernel='linear',random_state=100) 
#Setup arrays to store training and test accuracies
n=10 #jumlah fold
from sklearn.model_selection import StratifiedKFold
kf=StratifiedKFold(n_splits=n, random_state=None)
cm=[]
total=[]
ac=[]
se=[]
sp=[]
auc=[]

for train_index, test_index in kf.split(X,y):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y[train_index], y[test_index]
    svm.fit(X_train, y_train)
    y_pred = svm.predict(X_test)
    cm.append((confusion_matrix(y_test, y_pred)).astype(float))
for j in range (n):
    total.append(sum(sum(cm[j])))
    ac.append((cm[j][0,0]+cm[j][1,1])/total[j])
    se.append(cm[j][0,0]/(cm[j][0,0]+cm[j][0,1]))
    sp.append(cm[j][1,1]/(cm[j][1,0]+cm[j][1,1]))
    auc.append(((cm[j][0,0]/(cm[j][0,0]+cm[j][0,1]))+(cm[j][1,1]/(cm[j][1,0]+cm[j][1,1])))/2)
akurasi=np.mean(ac)
spesifisiti=np.mean(se)
sensitiviti=np.mean(sp)
AUC=np.mean(auc)
df=pd.DataFrame()
test=dict()
for j in range (4):
    test[j]=[]
for i in range (n):
    test[0].append(ac[i])
    test[1].append(se[i])
    test[2].append(sp[i])
    test[3].append(auc[i])
for i in range (4):
    df_k2=pd.concat([df_k2,pd.DataFrame(test[i])],axis=1)
df.columns=['Akurasi','Spesifisitas','Sensitivitas','Area Under the Curve']
end = time.time()
print ("Waktu Proses Klasifikasi SVM dengan Kernel Linear", end - start,"Second")
df